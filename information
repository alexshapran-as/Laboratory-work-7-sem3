1. Boost.Asio - это, большей частью, кросс-платформенная С++ библиотека для программирования сетей и некоторых других низкоуровневых программ ввода/вывода. 
Boost.Asio зависит от следующих библиотек:
-Boost.System: эта библиотека предоставляет поддержку операционной системе для библиотеки Boost (http://www.boost.org/doc/libs/1_51_0/doc/html/boost_system/index.html)
-Boost.Regex: эта библиотека (опция) используется в случае, если вы используете read_until() или async_read_until(), которые принимают boost::regex параметр
-Boost.DateTime: эта библиотека (опция) используется, если вы используете таймеры Boost.Asio
-OpenSSL: эта библиотека (опция) используется, если вы решите использовать SSL поддержку, предоставляемую Boost.Asio
Для создания простого асинхронного клиента вы будете делать что-то похожее на следующее:

using boost::asio;
io_service service;
ip::tcp::endpoint ep( ip::address::from_string("127.0.0.1"), 2001);
ip::tcp::socket sock(service);
sock.async_connect(ep, connect_handler);
service.run();
void connect_handler(const boost::system::error_code & ec)
 {
    // here we know we connected successfully
    // if ec indicates success 
}

Ваша программа должна иметь, по крайней мере один экземпляр io_service. Вы указываете где подключается и создается сокет. Затем, как только установлено соединение, вы асинхронно подключаетесь к адресу и порту (это завершение обработчика), то есть вызывается connect_handler.
После вызова connect_handler проверьте код на ошибки(ec), и в случае успеха вы можете асинхронно написать серверу.
Обратите внимание, что цикл service.run() будет выполняться до тех пор пока имеются незаконченные асинхронные операции. В предыдущем примере есть только одна такая операция, это сокет async_connect. После этого service.run() завершается.
Каждая асинхронная операция имеет завершающий обработчик, функцию, которая будет вызвана, когда операция завершится.
Следующий код это простой асинхронный сервер:

using boost::asio;
typedef boost::shared_ptr<ip::tcp::socket> socket_ptr;
io_service service;
ip::tcp::endpoint ep( ip::tcp::v4(), 2001)); // listen on 2001
ip::tcp::acceptor acc(service, ep);
socket_ptr sock(new ip::tcp::socket(service));
start_accept(sock);
service.run();
void start_accept(socket_ptr sock)
 {
    acc.async_accept(*sock, boost::bind( handle_accept, sock, _1) );
}
void handle_accept(socket_ptr sock, const boost::system::error_code & err)
 {
    if ( err) return;
    // at this point, you can read/write to the socket
    socket_ptr sock(new ip::tcp::socket(service));
    start_accept(sock);
}

В предыдущем фрагменте кода, во-первых, вы создаете экземпляр io_service. Затем вы указываете порт, который будете прослушивать. Потом создаете акцептор – объект для приема клиентских подключений, а так же создаете фиктивный сокет и асинхронно ждете подключения клиента.
Наконец, запускаете асинхронный цикл service.run(). При подключении клиента вызывается handle_accept (завершающий обработчик для вызова async_accept). Если нет ошибок, то вы можете использовать этот сокет для операций чтения/записи.
После использования сокета, вы создаете новый сокет и снова вызываете start_accept(), которая добавляет подобную асинхронную операцию «ждем подключения клиента», оставляя цикл service.run() занятым.

В случае, если вы используете асинхронные функции, все они возвращают код ошибки, который вы можете проверить в вашей функции обратного вызова. Асинхронные функции никогда не выкидывают исключений и не имеет никакого смысла делать это. А кто его поймает?

Потоки в Boost.Asio

Когда дело доходит до потоков в Boost.Asio, нам надо поговорить о следующем:
io_service: класс io_service является потоко-безопасным. Несколько потоков могут вызвать io_service::run(). Чаще всего вы, вероятно, вызываете io_service::run() из одного потока, так что функция ждет пока все блокирующие асинхронные функции будут выполнены. Тем не менее вы можете вызывать io_service::run() из нескольких потоков. Это блокирует все потоки, которые будут вызывать io_service::run(). Все функции обратного вызов будут вызваны в контекстах вех потоков, которые вызвали io_service::run(); это так же означает, что если вы вызвали io_service::run(), только в одном потоке, то все функции обратного вызова будут вызваны в контексте данного потока.
socket: классы сокетов не являются потоко-безопасными. Таким образом вам следует избегать таких ситуаций как читать из сокета в одном потоке, а писать в него в другом (это рекомендуется вообще, не говоря уже о Boost.Asio).
utility: Классы utility обычно не имеет смысла использовать в нескольких потоках, они не потоко-безопасны. Большинство из них используются короткое время, а затем выходят из области видимости.

Используя Boost.Asio, вы можете легко подключиться к последовательному порту. Имя порта COM7 на Windows или /dev/ttyS0 на POSIX платформах:

io_service service;
serial_port sp(service, "COM7");

После открытия вы можете установить некоторые параметры, такие как скорость передачи данных порта, четность, стоп-биты, как указано в следующем фрагменте кода:

serial_port::baud_rate rate(9600);
sp.set_option(rate);

Если порт открыт, то вы можете обрабатывать его в потоке, к тому же рекомендуется использовать свободные функции для чтения и/или записи в последовательный порт, например, read(), async_read(), write(), async_write(), как показано в следующем примере:

char data[512];
read(sp, buffer(data, 512));

Boost.Asio позволяет также подключаться к Windows-файлам и опять же использовать свободные функции, такие как read(), asyn_read() и другие, как показано ниже:

HANDLE h = ::OpenFile(...);
windows::stream_handle sh(service, h);
char data[512];
read(h, buffer(data, 512));

Таймеры

Некоторые операции ввода/вывода могут иметь временные ограничения для завершения. Вы можете применить это только к асинхронным операциям (так как синхронные средства блокирования не имеют временных ограничений). Например, следующее сообщение от вашего партнера должно прийти к вам через 100 миллисекунд:

bool read = false;
void deadline_handler(const boost::system::error_code &) 
{
    std::cout << (read ? "read successfully" : "read failed") << std::endl;
}
void read_handler(const boost::system::error_code &) 
{
    read = true;
}
ip::tcp::socket sock(service);
…
read = false;
char data[512];
sock.async_read_some(buffer(data, 512));
deadline_timer t(service, boost::posix_time::milliseconds(100));
t.async_wait(&deadline_handler);
service.run();

В предыдущем фрагменте кода если мы читаем наши данные до окончания времени, read установлено в true, то наш партнер достучался до нас вовремя. В противном случае, когда вызывается deadline_handler, read по-прежнему установлен в false, что означает, что мы не связались до конца отведенного времени.
Boost.Asio позволяет использовать синхронные таймеры, но, обычно, они эквивалентны простой операции sleep. Строчка boost::this_thread::sleep(500); и следующий фрагмент сделают тоже самое:

deadline_timer t(service, boost::posix_time::milliseconds(500));
t.wait();


Класс io_service

io_service – самый важный класс в библиотеке, он имеет дело с операционной системой, ждет конца всех асинхронных операций, а потом при завершении вызывает обработчик для каждой такой операции.
Вы можете использовать экземпляр io_service несколькими способами. В следующих примерах мы имеем три асинхронных операции, два соединенных сокета и таймер ожидания:
- Один поток с одним экземпляром io_service и одним обработчиком:

io_service service_;
// all the socket operations are handled by service_
ip::tcp::socket sock1(service_);
// all the socket operations are handled by service_
ip::tcp::socket sock2(service_);
sock1.async_connect( ep, connect_handler);
sock2.async_connect( ep, connect_handler);
deadline_timer t(service_, boost::posix_time::seconds(5));
t.async_wait(timeout_handler);
service_.run();

- Много потоков с одним экземпляром io_service и несколькими обработчиками:

io_service service_;
ip::tcp::socket sock1(service_);
ip::tcp::socket sock2(service_);
sock1.async_connect( ep, connect_handler);
sock2.async_connect( ep, connect_handler);
deadline_timer t(service_, boost::posix_time::seconds(5));
t.async_wait(timeout_handler);
for ( int i = 0; i < 5; ++i)
    boost::thread( run_service);
void run_service() 
{
    service_.run();
}

- Много потоков с несколькими экземплярами io_service и несколькими обработчиками:

io_service service_[2];
ip::tcp::socket sock1(service_[0]);
ip::tcp::socket sock2(service_[1]);
sock1.async_connect( ep, connect_handler);
sock2.async_connect( ep, connect_handler);
deadline_timer t(service_[0], boost::posix_time::seconds(5));
t.async_wait(timeout_handler); 
for ( int i = 0; i < 2; ++i)
    boost::thread( boost::bind(run_service, i));

void run_service(int idx) 
{
    service_[idx].run();
}

Прежде всего обратите внимание на то, что вы не можете иметь несколько экземпляров io_service в одном потоке. Не имеет смысла писать следующий код:

for ( int i = 0; i < 2; ++i) 
    service_[i].run();

Предыдущий участок кода не имеет никакого смысла, потому что service_[1].run() потребует service_[0].run() при закрытии первого. Так что все асинхронные операции service_[1] должны будут ждать обработки, а это не очень хорошая идея.
Во всех трех предыдущих примерах мы ждали три асинхронные операции для завершения. Чтобы объяснить различия, мы будем считать, что, спустя некоторое время, завершится операция 1 и сразу после этого завершится операция 2. Так же мы предположим, что каждому обработчику потребуется секунда, чтобы завершиться.

В первом случае мы ждем завершения всех трех операций в одном потоке. После завершения первой операции мы вызываем ее обработчик. Даже если операция 2 завершается сразу же после первой, мы будем вынуждены ждать секунду для вызова ее обработчика после завершения первой операции.
Во втором случае мы ждем завершения трех операций в двух потоках. После завершения первой операции мы вызываем ее обработчик в первом потоке. Как только завершиться операция 2, мы сразу же вызовем ее обработчик во втором потоке (в то время как первый поток занят, ожидая завершения обработчика первой операции, второй поток может свободно ответить на завершение любой другой операции).
В последнем случае, если операция 1 будет connect к sock1 и операция 2 connect к sock2, то приложение будет вести себя как и во втором случае. Первый поток будет обрабатывать обработчик connect для sock1, а второй поток – обработчик connect для sock2. Однако, если из sock1 является операцией 1 и тайм-аут deadline_timer t это операция 2, то первый поток будет обрабатывать обработчик для connect из sock1. Таким образом, обработчику тайм-аута deadline_timer t придется ждать конца работы обработчика connect из sock1 (он будет ждать одну секунду), в первом потоке обрабатывается как подключение к обработчику sock1, так и обработчик тайм-аута t.

Вот что вы должны извлечь из предыдущих примеров:
- Ситуация 1 для базовых приложений. Вы всегда будете сталкиваться с проблемами, если несколько обработчиков должны быть вызваны одновременно или же если они должны будут вызываться последовательно. Если один обработчик требует много времени для окончания, то остальным обработчикам придется подождать.
- Ситуация 2 для большинства случаев. Это очень хорошо, если несколько обработчиков должны быть вызваны одновременно и каждый из них вызывается в отдельном потоке. Единственное узкое место может возникнуть, если все обрабатывающие потоки заняты и в то же время должны быть вызваны новые обработчики. Тем не менее, в качестве простого решения можно просто увеличить количество потоков-обработчиков.
- Ситуация 3 является наиболее сложной и более гибкой. Вы должны ее использовать только тогда, когда ситуации 2 недостаточно. Это вероятно будет возможно, когда у вас имеется более тысячи одновременных подключений (сокетов). Вы можете считать, что каждый поток-обработчик (поток, запустивший io_service::run()) имеет свой собственный цикл select/epoll; он ждет все сокеты, контролирует операции чтения/записи и найдя хотя бы одну такую операцию начинает обрабатывать ее. В большинстве случаев вам не о чем беспокоиться, беспокоиться можно только в том случае, когда количество сокетов растет экспоненциально (более 1000 сокетов). В таком случае наличие нескольких циклов select/epoll может увеличить время отклика.

Если вы хотите, чтобы service.run() продолжил работать, вы должны предоставить ему больше работы. Есть два способа решения данной проблемы. Одним из способов является увеличение нагрузки на connect_handler, запустив еще одну асинхронную операцию.
Второй способ заключается в имитации некоторой его работы, используя следующий код:

typedef boost::shared_ptr<io_service::work> work_ptr;
work_ptr dummy_work(new io_service::work(service_));

Приведенный выше код обеспечит постоянную работу service_.run() до тех пор пока вы не вызовете useservice_.stop() или dummy_work.reset(0); // destroy dummy_work.

Пространства имен Boost.Asio

Все в Boost.Asio находится в пространстве имен boost::asio или его подпространстве, рассмотрим их:
- boost::asio: Это где находятся все основные классы и функции. Главные классы это io_service и streambuf. Здесь находятся такие функции как read, read_at, read_until, их асинхронные копии, а так же функции записи и их асинхронные копии.
- boost::asio::ip: Это место, где находится сетевая часть библиотеки. Основные классы это address, endpoint, tcp, udp, icmp, а основные функции это connect и async_connect. Обратите внимание, что socket в boost::asio::ip::tcp::socket это просто typedef внутри класса boost::asio::ip::tcp.
- boost::asio::error: Это пространство имен содержит коды ошибок, которые вы можете получить при вызове подпрограммы ввода/вывода
- boost::asio::ssl: Это пространство имен содержит классы, имеющие дело с SSL.
- boost::asio::local: Это пространство имен содержит POSIX-специфичные классы
- boost::asio::windows: Это пространство имен содержит Windows-специфичные классы

IP адреса

Для работы с IP адресами Boost.Asio предоставляет классы ip::address, ip::address_v4 и ip::address_v6. 
Они предоставляют множество функций. Вот наиболее важные из них:
- ip::address(v4_or_v6_address): Эта функция конвертирует v4 или v6 адрес в ip::address
- ip::address:from_string(str): Эта функция создает адрес из IPv4 адреса (разделенных точками) или из IPv6 (шестнадцатиричный формат)
- ip::address::to_string(): Эта функция возвращает представление адреса в благоприятном строчном виде
- ip::address_v4::broadcast([addr, mask]): Эта функция создает broadcast адрес
- ip::address_v4::any(): Эта функция возвращает адрес, который олицетворяет любой адрес
- ip::address_v4::loopback(), ip_address_v6::loopback(): Эта функция возвращает шлейф адресов (из v4/v6 протокола)
- ip::host_name(): Эта функция возвращает имя текущего хоста в виде строчки

Скорее всего чаще всего вы будете использовать функцию ip::address::from_string:

ip::address addr = ip::address::from_string("127.0.0.1");

Если вам необходимо подключиться к имени хоста, читайте дальше. Следующий код не будет работать:

// throws an exception
ip::address addr = ip::address::from_string("www.yahoo.com");

Конечные точки (Endpoints)

Конечная точка это адрес подключения вместе с портом. Каждый тип сокетов имеет свой endpoint класс, например, ip::tcp::endpoint, ip::udp::endpoint, и ip::icmp::endpoint. 
Если вы хотите подключиться к localhost по 80 порту, то вам нужно написать следующее:

ip::tcp::endpoint ep( ip::address::from_string("127.0.0.1"), 80);

Вы можете создать конечную точку тремя способами:
endpoint(): конструктор по умолчанию и он может быть иногда использован для UDP/ICMP сокетов
endpoint(protocol, port): обычно используется на серверных сокетах для приема новых подключений
endpoint(addr, port): создание конечной точки по адресу и порту

Вот несколько примеров:

ip::tcp::endpoint ep1;
ip::tcp::endpoint ep2(ip::tcp::v4(), 80);
ip::tcp::endpoint ep3( ip::address::from_string("127.0.0.1), 80);

Если же вы хотите подключится к хосту (не IP адресу), то вам нужно сделать следующее:

 // outputs "87.248.122.122"
io_service service;
ip::tcp::resolver resolver(service);
ip::tcp::resolver::query query("www.yahoo.com", "80");
ip::tcp::resolver::iterator iter = resolver.resolve( query);
ip::tcp::endpoint ep = *iter;
std::cout << ep.address().to_string() << std::endl;

Можете заменить tcp на нужный вам тип сокета. Во-первых, создайте запрос с именем, к которому хотите подключиться, это можно реализовать с помощью функции resolve(). В случае успеха вернется хотя бы одна запись.
Получив конечную точку, вы можете получить из нее адрес, порт и IP протокол (v4 или v6):

std::cout << ep.address().to_string() << ":" << ep.port() << "/" << ep.protocol() << std::endl;


Сокеты

Вы можете думать о классах ip::tcp, ip::udp, ip::icmp как о заполнителях; они дают возможность легко добраться до других классов/функций, которые определяются следующим образом:
ip::tcp::socket, ip::tcp::acceptor, ip::tcp::endpoint, ip::tcp::resolver, ip::tcp::iostream
ip::udp::socket, ip::udp::endpoint, ip::udp::resolver
ip::icmp::socket, ip::icmp::endpoint, ip::icmp::resolver

Класс socket создает соответствующий сокет. Вы всегда передаете экземпляр io_service в конструктор:

io_service service;
ip::udp::socket sock(service)
sock.set_option(ip::udp::socket::reuse_address(true));

Каждое имя сокета имеет typedef:
ip::tcp::socket= basic_stream_socket 
ip::udp::socket= basic_datagram_socket<udp> 
ip::icmp::socket= basic_raw_socket 


Соединительно-связывающие функции

Это функции, которые подключаются или соединяются с сокетом, отключают его и делают запрос о подключении, активно оно или нет:
- assign(protocol,socket): эта функция присваивает сырой(естественный) сокет к экземпляру сокета. Используйте ее при работе с наследуемым кодом (то есть когда сырые сокеты уже созданы).
- open(protocol): эта функция открывает сокет с заданным IP-протоколом (v4 или v6). Вы будете использовать ее в основном для UDP/ICMP сокетов или серверных сокетов
- bind(endpoint): эта функция связывается с данным адресом.
- connect(endpoint): эта функция синхронно подключается по данному адресу.
- async_connect(endpoint): эта функция асинхронно подключается по данному адресу.
- is_open(): эта функция возвращает true если сокет открыт.
- close(): эта функция закрывает сокет. Любые асинхронные операции на этом сокете немедленно прекращаются и возвращают error::operation_aborted код ошибки.
- shutdown(type_of_shutdown): эта функция отключает операцию send , receive или обе сразу же после вызова.
- cancel(): эта функция отменяет все асинхронные операции на этом сокете. Все асинхронные операции на этом сокете будут немедленно завершены и вернут error::operation_aborted код ошибки.

Приведем небольшой пример:

ip::tcp::endpoint ep( ip::address::from_string("127.0.0.1"), 80);
ip::tcp::socket sock(service);
sock.open(ip::tcp::v4());
sock.connect(ep);
sock.write_some(buffer("GET /index.html\r\n"));
char buff[1024]; sock.read_some(buffer(buff,1024));
sock.shutdown(ip::tcp::socket::shutdown_receive);
sock.close();

Функции чтения/записи

Это функции, которые выполняют ввод/вывод на сокете.
Для асинхронных функций обработчик имеем следующую сигнатуру void handler(const boost::system::error_code& e, size_t bytes);. А вот сами функции:
- async_receive(buffer, [flags,] handler): эта функция запускает асинхронную операцию получения данных от сокета.
- async_read_some(buffer,handler): эта функция эквивалента async_receive(buffer, handler).
- async_receive_from(buffer, endpoint[, flags], handler): эта функция запускает асинхронное получение данных от определенного адреса.
- async_send(buffer [, flags], handler): эта функция запускает операцию асинхронной передачи данных из буфера
- async_write_some(buffer, handler): эта функция эквивалентна async_send(buffer, handler).
- async_send_to(buffer, endpoint, handler): эта функция запускает операцию асинхронной передачи данных из буфера по определенному адресу.
- receive(buffer [, flags]): эта функция синхронно принимает данные в буфер. Функция заблокирована пока не начнут приходить данные или если произошла ошибка.
- read_some(buffer): эта функция эквивалентна receive(buffer).
- receive_from(buffer, endpoint [, flags]): эта функция синхронно принимает данные от определенного адреса в данный буфер. Функция заблокирована пока не начали приходить данные или если произошла ошибка.
- send(buffer [, flags]): эта функция синхронно отправляет данные из буфера. Функция заблокирована пока идет отправка данных или если произошла ошибка.
- write_some(buffer): эта функция эквивалентна send(buffer).
- send_to(buffer, endpoint [, flags]): эта функция синхронно передает данные из буфера по данному адресу. Функция заблокирована пока идет отправка данных или если произошла ошибка.
available(): эта функция возвращает количество байт, которое можно считать синхронно, без блокировки.

Мы будем говорить о буферах в ближайшее время. Давайте рассмотрим флаги. Значение по умолчанию для флагов равно 0, но возможны комбинации:
- ip::socket_type::socket::message_peek: этот флаг только заглядывает в сообщение. Он вернет сообщение, но при следующем вызове, чтобы прочитать сообщение нужно будет его перечитать.
- ip::socket_type::socket::message_out_of_band: этот флаг обрабатывает вне-полосные данные(out-of-band). OOB данные это данные, которые помечены как более важные, по сравнению с обычными данными. Обсуждение OOB данных выходит за рамки данной книги.
- ip::socket_type::socket::message_do_not_route: этот флаг указывает, что сообщение должно быть отправлено без использования таблиц маршрутизации.
- ip::socket_type::socket::message_end_of_record: этот флаг указывает на то, что данные помечены маркером об окончании записи. Это не поддерживается в Windows.

Ниже приведены примеры, которые дают указания читать  асинхронно различным типам сокетов:
Пример 3: асинхронное чтение из UDP серверного сокета:
using namespace boost::asio;
io_service service;
ip::udp::socket sock(service);
boost::asio::ip::udp::endpoint sender_ep;
char buff[512];
void on_read(const boost::system::error_code & err, std::size_t
read_bytes)
 {
	std::cout << "read " << read_bytes << std::endl;
	sock.async_receive_from(buffer(buff), sender_ep, on_read);
}
int main(int argc, char* argv[]) 
{
	ip::udp::endpoint ep( ip::address::from_string("127.0.0.1"),
	8001);
	sock.open(ep.protocol());
	sock.set_option(boost::asio::ip::udp::socket::reuse_
	address(true));
	sock.bind(ep);
	sock.async_receive_from(buffer(buff,512), sender_ep, on_read);
	service.run();
}

Функции подключения

Эти функции подключают сокет или конечный адрес:
- connect(socket, begin [, end] [, condition]): эта функция пытается синхронно подключить каждый конечный адрес в последовательности, начиная с begin и заканчивая end. Итератор begin является результатом вызова socket_type::resolver::query (если хотите, можете посмотреть раздел «Конечные точки» еще раз). Указание конечного итератора не является обязательным, вы можете забыть об этом. Вы можете указать condition функции, которое вызывается перед каждой попыткой подключения. Это есть сигнатура Iterator connect_condition(const boost::system::error_code & err, Iterator next);. Вы можете выбрать другой итератор для возврата, чем следующий, это позволяет пропускать некоторые конечные адреса.
- async_connect(socket, begin [, end] [, condition], handler): эта функция выполняет асинхронное подключение и в конце вызывает обработчик завершения. Сигнатура обработчика следующая void handler(const boost::system::error_code & err, Iterator iterator);. Вторым параметром, передаваемым в обработчик является успешно подключенный конечный адрес (или итератор end в противном случае).

Приведем следующий пример:

using namespace boost::asio::ip;
tcp::resolver resolver(service);
tcp::resolver::iterator iter = resolver.resolve(tcp::resolver::query("www.yahoo.com","80"));
tcp::socket sock(service);
connect(sock, iter);

Имя хоста может вмещать более одного адреса, таким образом connect и async_connect освобождают вас от бремени проверять каждый адрес, чтобы понять какой из них доступен; они делают это за вас.

Функции чтения/записи

Это функции чтения или записи в поток (который может быть как сокетом так и любым другим классом, который ведет себя как поток):
- async_read(stream, buffer [, completion] ,handler): эта функция асинхронно читает из потока. По завершении вызывается обработчик. Он имеет следующую сигнатуру void handler(const boost::system::error_code & err, size_t bytes);. При необходимости вы сами можете задать completion функцию. Completion функция вызывается после каждой успешной операции read, и сообщает Boost.Asio если функция async_read завершилась (если нет, то функция продолжит чтение). Следующий параметр это size_t completion (const boost::system::error_code& err, size_t bytes_transfered). Когда эта завершающая функция возвращает 0, мы считаем, что операция чтения завершилась; если же вернулось ненулевое значение, то это означает, что максимальное количество байт будет прочитано при следующем вызове операции async_read_some в потоке. Далее будет рассмотрен пример для более лучшего понимания.
- async_write(stream, buffer [, completion], handler): это функция асинхронной записи в поток. Список аргументов схож с async_read.
- read(stream, buffer [, completion]): это функция синхронного чтения из потока. Список аргументов схож с async_read
- write(stream, buffer [, completion]): это функция синхронной записи в поток. Список аргументов схож с async_read.
- async_read(stream, stream_buffer [, completion], handler)
- async_write(strean, stream_buffer [, completion], handler)
- write(stream, stream_buffer [, completion])
read(stream, stream_buffer [, completion])

Во-первых заметим, что вместо сокета первым аргументом передается поток. Сюда может передаваться сокет, но этим не ограничивается. Например, вместо сокета вы можете использовать файл Windows.
Каждая операция чтения или записи закончится при выполнении одного из следующих условий:
Предоставленный буфер заполнится (для чтения) или все данные в буфере будут записаны (для записи).
Completion функция вернет 0 (если вы предоставили одну из таких функций).
Если произошла ошибка.

Следующий код асинхронно читает, пока не встретит '\n':

io_service service;
ip::tcp::socket sock(service);
char buff[512];
int offset = 0;
size_t up_to_enter(const boost::system::error_code &, size_t bytes) 
{
	for ( size_t i = 0; i < bytes; ++i)
		if ( buff[i + offset] == '\n')
			return 0;
	return 1;
}
void on_read(const boost::system::error_code &, size_t) {}
...
async_read(sock, buffer(buff), up_to_enter, on_read);

Кроме того, Boost.Asio предоставляет для помощи несколько completion функций:
transfer_at_least(n)
transfer_exactly(n)
transfer_all()

Это иллюстрируется в следующем примере:

char buff[512];
void on_read(const boost::system::error_code &, size_t) {}
// read exactly 32 bytes
async_read(sock, buffer(buff), transfer_exactly(32), on_read);

Последние четыре функции вместо обычного буфера используют функцию stream_buffer из Boost.Asio, это производная от std::streambuf. Сами потоки и их буферы из STL являются очень гибкими, вот пример:

io_service service;
void on_read(streambuf& buf, const boost::system::error_code &,
size_t) 
{
	std::istream in(&buf);
	std::string line;
	std::getline(in, line);
	std::cout << "first line: " << line << std::endl;
}
int main(int argc, char* argv[]) 
{
	HANDLE file = ::CreateFile("readme.txt", GENERIC_READ, 0, 0,
	OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,0);
	windows::stream_handle h(service, file);
	streambuf buf;
	async_read(h, buf, transfer_exactly(256),
	boost::bind(on_read,boost::ref(buf),_1,_2));
	service.run();
}

Здесь я показал вам, что вы можете вызвать async_read (или что-то подобное) для файлов Windows. Мы считываем первые 256 символов и сохраняем их в буфер. Когда операция чтения завершится, будет вызвана on_read, я создаю std::istream буфер, считываю первую строчку (std::getline) и вывожу это в консоль.

